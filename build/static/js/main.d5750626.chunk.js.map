{"version":3,"sources":["virus.svg","Api.js","components/AreaChart.js","components/Summary.js","App.js","index.js"],"names":["baseEndspoint","fetchCountries","a","axios","get","data","fetchDailyData","country","fetchSummary","AreaChart","useState","dailyData","setDailyData","useEffect","fetchCountryDailyData","id","options","chart","type","dataLabels","enabled","stroke","curve","xaxis","categories","map","item","Date","tooltip","x","format","series","name","Confirmed","Deaths","Recovered","Active","style","marginTop","height","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","Summary","classes","summaries","setSummary","fetchSummaries","Fragment","Grid","Container","xs","Card","variant","CardContent","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeahs","TotalRecovered","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","Countries","filter","Slug","Filtered","scope","Country","TotalDeaths","NewRecovered","formControl","margin","width","App","countries","setCountries","setCountry","fetchCountriesData","CssBaseline","maxWidth","container","src","covidLogo","alt","FormControl","Select","value","onChange","e","target","MenuItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,MAA0B,kC,gFCEnCA,EAAc,6BACPC,EAAc,uCAAC,8BAAAC,EAAA,sEACLC,IAAMC,IAAN,UAAaJ,EAAb,eADK,uBACjBK,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAD,qDAIdC,EAAc,uCAAC,WAAOC,GAAP,iBAAAL,EAAA,sEACLC,IAAMC,IAAN,UAAaJ,EAAb,2BAA6CO,IADxC,uBACjBF,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAD,sDAIdG,EAAY,uCAAC,8BAAAN,EAAA,sEACHC,IAAMC,IAAN,UAAaJ,EAAb,aADG,uBACfK,EADe,EACfA,KADe,kBAEfA,GAFe,2CAAD,qD,iBCmDVI,EA1DG,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QAAc,EACCG,mBAAS,IADV,mBAC1BC,EAD0B,KACfC,EADe,KAUjC,OARAC,qBAAU,YACmB,uCAAG,4BAAAX,EAAA,sEACTI,EAAeC,GADN,OACtBF,EADsB,OAE5BO,EAAaP,GAFe,2CAAH,qDAI3BS,KACC,CAACP,IAGF,qBAAKQ,GAAG,QAAR,SACE,cAAC,IAAD,CACEC,QAAS,CACPC,MAAO,CACLC,KAAM,QAERC,WAAY,CACVC,SAAS,GAEXC,OAAQ,CACNC,MAAO,UAETC,MAAO,CACLL,KAAM,WACNM,WAAYb,EAAUc,KAAI,SAACC,GAAD,OAAUA,EAAKC,SAE3CC,QAAS,CACPC,EAAG,CACDC,OAAQ,aAIdC,OAAQ,CACN,CACEC,KAAM,YACN3B,KAAMM,EAAUc,KAAI,SAACC,GAAD,OAAUA,EAAKO,cAErC,CACED,KAAM,QACN3B,KAAMM,EAAUc,KAAI,SAACC,GAAD,OAAUA,EAAKQ,WAErC,CACEF,KAAM,YACN3B,KAAMM,EAAUc,KAAI,SAACC,GAAD,OAAUA,EAAKS,cAErC,CACEH,KAAM,SACN3B,KAAMM,EAAUc,KAAI,SAACC,GAAD,OAAUA,EAAKU,YAGvCC,MAAO,CAACC,UAAU,IAClBC,OAAQ,S,uFC1CVC,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAC7CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAACC,GAAD,MAAY,CAC5CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,OAAOC,WAHrBf,CAMnBgB,KAEEC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAkLCC,EA/KC,SAAC,GAAiB,IAAfvD,EAAc,EAAdA,QACXwD,EAAUL,IADe,EAEChD,mBAAS,IAFV,mBAExBsD,EAFwB,KAEbC,EAFa,KAI/BpD,qBAAU,YACY,uCAAG,4BAAAX,EAAA,sEACFM,IADE,OACfH,EADe,OAErB4D,EAAW5D,GAFU,2CAAH,qDAIpB6D,KACA,IA6IF,OACE,cAAC,IAAMC,SAAP,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAM1C,MAAI,EAAC4C,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAMC,QAAQ,WAAd,SACE,eAACC,EAAA,EAAD,WACA,6CA9IN,+BACA,gDAAmBT,EAAUU,OAAOC,gBACpC,kDAAqBX,EAAUU,OAAOE,kBACtC,6CAAgBZ,EAAUU,OAAOG,aACjC,kDAAqBb,EAAUU,OAAOI,cACtC,kDAAqBd,EAAUU,OAAOK,4BA8IpC,cAACX,EAAA,EAAD,CAAM1C,MAAI,EAAC4C,GAAI,GAAf,SAvIR,cAACU,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACY,eAACC,EAAA,EAAD,CAAOC,UAAWrB,EAAQH,MAAOyB,aAAW,mBAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAAC7B,EAAA,EAAD,WACE,cAACjB,EAAD,sBACA,cAACA,EAAD,CAAiB+C,MAAM,QAAvB,0BACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,4BAGA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,uBACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,yBACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,0BACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,iCAKJ,cAACC,EAAA,EAAD,UA0BIxB,EAAUyB,UAAUC,QAAO,SAAAhE,GAAI,OAAGA,EAAKiE,OAAOpF,KAASkB,KAAI,SAAAmE,GAAQ,OACnE,eAACvC,EAAD,WACE,cAACb,EAAD,CAAiByC,UAAU,KAAKY,MAAM,MAAtC,SACGD,EAASE,UAEZ,cAACtD,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAASjB,eAEZ,cAACnC,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAAShB,iBAEZ,cAACpC,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAASf,YAEZ,cAACrC,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAASG,cAEZ,cAACvD,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAASI,eAEZ,cAACxD,EAAD,CAAiB+C,MAAM,QAAvB,SACGK,EAASb,mBApBOa,EAASE,qBA+FxC,cAAC1B,EAAA,EAAD,CAAM1C,MAAI,EAAC4C,GAAI,GAAf,SAhER,cAACU,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACY,eAACC,EAAA,EAAD,CAAOC,UAAWrB,EAAQH,MAAOyB,aAAW,mBAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAAC7B,EAAA,EAAD,WACE,cAACjB,EAAD,sBACA,cAACA,EAAD,CAAiB+C,MAAM,QAAvB,0BACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,4BAGA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,uBACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,yBACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,0BACA,cAAC/C,EAAD,CAAiB+C,MAAM,QAAvB,iCAKJ,cAACC,EAAA,EAAD,UACGxB,EAAUyB,UAAUhE,KAAI,SAACC,GAAD,OACvB,eAAC2B,EAAD,WACE,cAACb,EAAD,CAAiByC,UAAU,KAAKY,MAAM,MAAtC,SACGnE,EAAKoE,UAER,cAACtD,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKiD,eAER,cAACnC,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKkD,iBAER,cAACpC,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKmD,YAER,cAACrC,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKqE,cAER,cAACvD,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKsE,eAER,cAACxD,EAAD,CAAiB+C,MAAM,QAAvB,SACG7D,EAAKqD,mBApBWrD,EAAKoE,2BChJtCpC,EAAYC,aAAW,SAACjB,GAAD,MAAY,CACvCuD,YAAa,CACXC,OAAQ,YACRC,MAAO,WAqDIC,EAjDH,WACV,IAAMrC,EAAUL,IADA,EAEkBhD,mBAAS,IAF3B,mBAET2F,EAFS,KAEEC,EAFF,OAGc5F,mBAAS,UAHvB,mBAGTH,EAHS,KAGAgG,EAHA,KAWhB,OAPA1F,qBAAU,YACgB,uCAAG,4BAAAX,EAAA,sEACND,IADM,OACnBI,EADmB,OAEzBiG,EAAajG,GAFY,2CAAH,qDAIxBmG,KACC,CAACjG,IAEF,eAAC,IAAM4D,SAAP,WACE,cAACsC,EAAA,EAAD,IACA,cAACpC,EAAA,EAAD,CAAWqC,SAAS,KAApB,SACE,eAACtC,EAAA,EAAD,CAAMuC,WAAS,EAAf,UACE,qBACEC,IAAKC,EACLC,IAAI,eACJzE,MAAO,CAAE8D,MAAO,IAAK5D,OAAQ,IAAKD,UAAW,MAG/C,cAACyE,EAAA,EAAD,CAAa3B,UAAWrB,EAAQkC,YAAhC,SACE,cAACe,EAAA,EAAD,CACEC,MAAO1G,EACP2G,SAAU,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,OAAOH,QACrC5E,MAAO,CAAEW,MAAO,SAHlB,SAKGqD,EAAU5E,KAAI,SAAClB,GAAD,MAAa,CAC1B,cAAC8G,EAAA,EAAD,CAAUJ,MAAO1G,EAAQoF,KAAzB,SAAgCpF,EAAQuF,kBAM9C,cAAC1B,EAAA,EAAD,CAAM1C,MAAI,EAAC4C,GAAI,GAAf,SACE,cAACY,EAAA,EAAD,UACE,cAAC,EAAD,CAAW3E,QAASA,QAGxB,cAAC6D,EAAA,EAAD,CAAM1C,MAAI,EAAC4C,GAAI,GAAf,SACE,cAAC,EAAD,CAAS/D,QAASA,e,MC1D9B+G,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d5750626.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/virus.efcc64a4.svg\";","import axios from 'axios';\r\n\r\nconst baseEndspoint=\"https://api.covid19api.com\";\r\nexport const fetchCountries=async ()=>{\r\n    const {data}=await axios.get(`${baseEndspoint}/countries`);\r\n    return data;\r\n}\r\nexport const fetchDailyData=async (country)=>{\r\n    const {data}=await axios.get(`${baseEndspoint}/dayone/country/${country}`);\r\n    return data;\r\n}\r\nexport const fetchSummary=async ()=>{\r\n    const {data}=await axios.get(`${baseEndspoint}/summary`);\r\n    return data;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { fetchDailyData } from \"../Api\";\r\n\r\nconst AreaChart = ({ country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchCountryDailyData = async () => {\r\n      const data = await fetchDailyData(country);\r\n      setDailyData(data);\r\n    };\r\n    fetchCountryDailyData();\r\n  }, [country]);\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <Chart\r\n        options={{\r\n          chart: {\r\n            type: \"area\",\r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\",\r\n          },\r\n          xaxis: {\r\n            type: \"datetime\",\r\n            categories: dailyData.map((item) => item.Date),\r\n          },\r\n          tooltip: {\r\n            x: {\r\n              format: \"dd/MM/y\",\r\n            },\r\n          },\r\n        }}\r\n        series={[\r\n          {\r\n            name: \"Confirmed\",\r\n            data: dailyData.map((item) => item.Confirmed),\r\n          },\r\n          {\r\n            name: \"Death\",\r\n            data: dailyData.map((item) => item.Deaths),\r\n          },\r\n          {\r\n            name: \"Recovered\",\r\n            data: dailyData.map((item) => item.Recovered),\r\n          },\r\n          {\r\n            name: \"Active\",\r\n            data: dailyData.map((item) => item.Active),\r\n          },\r\n        ]}\r\n        style={{marginTop:25 }}\r\n        height={450}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AreaChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchSummary } from \"../Api\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\nconst Summary = ({ country }) => {\r\n  const classes = useStyles();\r\n  const [summaries, setSummary] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchSummaries = async () => {\r\n      const data = await fetchSummary();\r\n      setSummary(data);\r\n    };\r\n    fetchSummaries();\r\n  },[]);\r\n  {/*Global Data*/}\r\n  const allGlobalDailyData = () => {\r\n    return (\r\n     \r\n      <ul>\r\n      <li>New Confirmed:{summaries.Global.NewConfirmed}</li>\r\n      <li>Total Confirmed:{summaries.Global.TotalConfirmed}</li>\r\n      <li>new Deaths:{summaries.Global.NewDeaths}</li>\r\n      <li>Total Confirmed:{summaries.Global.TotalDeahs}</li>\r\n      <li>Total Recovered:{summaries.Global.TotalRecovered}</li>\r\n    </ul>\r\n    )\r\n  };\r\n  {/*All Country*/}\r\n  const dailySelectedCountryData=()=>{\r\n    return(\r\n<TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>Country</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewConfirmed</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    TotalConfirmed\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewDeaths</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">TotalDeaths</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewRecovered</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    TotalRecovered\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {/* {summaries.Countries.map((item) => (\r\n                  <StyledTableRow key={item.Country}>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                      {item.Country}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewRecovered}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalRecovered}\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))} */}\r\n                 {summaries.Countries.filter(item =>item.Slug===country).map(Filtered=> (\r\n                  <StyledTableRow key={Filtered.Country}>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                      {Filtered.Country}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.NewConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.TotalConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.NewDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.TotalDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.NewRecovered}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {Filtered.TotalRecovered}\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n    )\r\n  }\r\n  const dailyAllWorldData=()=>{\r\n    return(\r\n<TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>Country</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewConfirmed</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    TotalConfirmed\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewDeaths</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">TotalDeaths</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">NewRecovered</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    TotalRecovered\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {summaries.Countries.map((item) => (\r\n                  <StyledTableRow key={item.Country}>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                      {item.Country}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalConfirmed}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalDeaths}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.NewRecovered}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {item.TotalRecovered}\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))}\r\n                \r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Grid Container>\r\n        <Grid item xs={12}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n            <h1>Global Data</h1>\r\n              {allGlobalDailyData()}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n\r\n          {dailySelectedCountryData()}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n\r\n          {dailyAllWorldData()}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import React, { useEffect, useState } from \"react\";\nimport covidLogo from \"./virus.svg\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { fetchCountries } from \"./Api\";\nimport AreaChart from \"./components/AreaChart\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Summary from \"./components/Summary\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: \"50px auto\",\n    width: \"60%\",\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"turkey\");\n  useEffect(() => {\n    const fetchCountriesData = async () => {\n      const data = await fetchCountries();\n      setCountries(data);\n    };\n    fetchCountriesData();\n  }, [country]);\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <Grid container>\n          <img\n            src={covidLogo}\n            alt=\"Covid 19Logo\"\n            style={{ width: 100, height: 100, marginTop: 20 }}\n          />\n\n          <FormControl className={classes.formControl}>\n            <Select\n              value={country}\n              onChange={(e) => setCountry(e.target.value)}\n              style={{ color: \"white\" }}\n            >\n              {countries.map((country) => [\n                <MenuItem value={country.Slug}>{country.Country}</MenuItem>,\n              ])}\n            </Select>\n          </FormControl>\n\n          {/*Chart*/}\n          <Grid item xs={12}>\n            <Paper>\n              <AreaChart country={country} />\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n            <Summary country={country} />\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}